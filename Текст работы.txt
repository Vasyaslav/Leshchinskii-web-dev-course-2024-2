1 АНАЛИЗ ПРЕДМЕТНОЙ ОБЛАСТИ
1.1. Обзор существующих программных продуктов по теме работы
Среди существующих программных продут по теме работы для рассмотрения выбраны следующие: интернет-магазин DNS и М.Видео.
Оба магазина имеют схожий функционал:
•	выбор категории товара;
•	поиск товара по названию;
•	сортировка товаров по цене, популярности и оценкам;
•	создания аккаунта и авторизации;
•	добавление товаров в корзину и удаление из неё;
Дизайн сайтов магазинов различается – М.Видео имеет более компактный дизайн, как среди списка товаров, так и в корзине пользователя (рисунок 1) (рисунок 2) (рисунок 3) (рисунок 4).

1.2. Анализ программных инструментов разработки веб-приложений
Среди программных инструментов разработки выбраны: 
•	библиотеки Flask и MySQL языка программирования высокого уровня Python для написания backend части приложения;
•	язык программирования высокого уровня JavaScript и язык разметки HTML для написания frontend части приложения.
•	язык программирования баз данных SQL.
1.3. Формулировка цели и задач работы

Цель работы: разработать и создать сайт для интернет-магазина электронных устройств и техники.
Задачи:
•	проанализировать предметную область;
•	спроектировать модель данных;
•	разработать макеты страниц;
•	разработать веб-приложение;
•	задеплоить веб-приложение на хостинг;
•	оформить итоги работы.

2 ПРОЕКТИРОВАНИЕ ВЕБ-ПРИЛОЖЕНИЯ
2.1. Анализ целевой аудитории
Целевой аудиторией приложения являются люди, желающие приобрести электроприборы.

2.2. Описание функциональности приложения
Диаграмма вариантов использования пользователя (рисунок 5).

Диаграмма вариантов использования администратора (рисунок 6). Администратор помимо вариантов использования, представленных ниже, имеет также все варианты использования обычного пользователя (рисунок 5).
 

2.3. Проектирование модели данных
Логическая схема БД веб-приложения (рисунок 7).

ERD для БД веб-приложения (рисунок 8).

Физическая схема БД веб-приложения (рисунок 9).

2.4. Разработка макетов страниц
Макет главной страницы (рисунок 10).

Макет каталога (рисунок 11).

Макет страницы со списком товаров (рисунок 12).

Макет страницы товара (рисунок 13).

Макет страницы редактирования товара (рисунок 14).

Макет страницы авторизации (рисунок 15).

Макет страницы пользователя (рисунок 16).

Макет страницы оформления заказа (рисунок 17).

Макет страницы со списком бывших заказов пользователя (рисунок 18).

Макет страницы редактирования пользователя (рисунок 19).

3 РАЗРАБОТКА ВЕБ-ПРИЛОЖЕНИЯ
3.1. Программные модули
Всего в приложении 7 модулей:
•	app.py – инициализация приложения и подключение других модулей;
•	auto.py – функционал класса пользователя и авторизация;
•	mysqldb.py – установка связи с базой данных;
•	products.py – отображение, изменение, удаление товаров, их категорий и характеристик;
•	users.py – регистрация новых, отображение, изменение, удаление пользователей, отображение товаров в корзине, предыдущих заказов и их содержание и оформление новых заказов, загрузка товаров в корзину из .csv файла.
•	user_policy.py – функционал класса привилегий пользователя;
•	user_products.py – добавление, удаление и изменение количество товаров в корзине пользователя, также формирование .csv файла с товарами в корзине пользователя;

3.2. Прочие файлы являющиеся частью приложения
HTML файлы:
•	базовый шаблон base.html используемый другими шаблонами;
•	2 макроса – для отображения и изменения товара и для регистрации и изменения пользователей;
•	15 шаблонов служащих для отображения страниц;
JavaScript файлы:
•	category_delete_modal.js – содержит скрипт для связи кнопки удаления категории с функцией, реализующей удаление категории;
•	characteristic_delete_modal.js – содержит скрипт для связи кнопки удаления характеристики с функцией, реализующей удаление характеристики;
•	product_delete_modal.js – содержит скрипт для связи кнопки удаления товара с функцией, реализующей удаление товара;
•	user_delete_modal.js – содержит скрипт для связи кнопки удаления пользователя с функцией, реализующей удаление пользователя;
•	user_product_delete_modal.js – содержит скрипт для связи кнопки удаления товара в корзине с функцией, реализующей удаление товара из корзины;
•	new_product_characteristic.js – содержит скрипты для кнопок добавления и удаления полей для характеристик при добавлении или редактировании товара.
Python файлы:
•	config.py – файл конфигураций, используемый программными модулями.
CSS файлы:
•	styles.css – содержит стили для основного шаблона.

3.3. Пример кода
На листинге 1 приведён код, для кнопки добавления полей для характеристик при добавлении или редактировании товара.
При запуске скрипт копирует первое существующее поле с характеристиками (гарантированно существует хотя бы 1) в качестве шаблона для добавления других полей.
При нажатии на кнопку скрипт пытается найти последнее поле для характеристики, если его нет, то он добавляет в id и name элементов поля число «1» – уникальный идентификатор необходимый для различия разных полей характеристик, и вставляет поле после надписи «Характеристики», в ином случае он добавляет в id и name элементов поля уникальный идентификатор последнего поля с характеристиками увеличенный на 1 и вставляет поле после надписи последнего найденного поля характеристики.
Листинг 1
let characteristic_group_sample = document.body.querySelector('div.input-group').cloneNode(true);
function add_characteristic_group(event) {
    let last_characteristic = document.body.querySelectorAll('div.input-group')[document.body.querySelectorAll('div.input-group').length - 1];
    let last_characteristic_number;
    let sample = characteristic_group_sample.cloneNode(true);
    if (last_characteristic == null) {
        last_characteristic = document.getElementById('characteristics_header');
        last_characteristic_number = 1;
    }
    else {
        last_characteristic_number = Number(last_characteristic.firstElementChild.id.split('_')[3]);
    }
    console.log(sample);
    console.log(last_characteristic_number);
    sample.children[0].id = `product_characteristic_select_${last_characteristic_number + 1}`;
    sample.children[0].name = `product_characteristic_select_${last_characteristic_number + 1}`;
    sample.children[1].id = `product_characteristic_input_${last_characteristic_number + 1}`;
    sample.children[1].name = `product_characteristic_input_${last_characteristic_number + 1}`;
    sample.children[2].id = `product_characteristic_button_${last_characteristic_number + 1}`;
    sample.children[2].onclick = delete_characteristic_group;
    console.log(sample);
    last_characteristic.after(sample);
}

3.4. Ссылки
•	Репозиторий GitHub – https://github.com/Vasyaslav/Leshchinskii-web-dev-course-2024-2.
•	Хостинг – 
 
ЗАКЛЮЧЕНИЕ
В ходе выполнения данной курсовой работы я узнал о необходимости и назначении смежных таблиц в базах данных, закрепил свои знания о механизмах работы и способах использования шаблонизатора Jinja, способах разбиения на модули приложения на Flask, работе с базой данных с помощью библиотеки mysql, а также работе с файлами со стороны бэкенда.
Помимо этого, я получил опыт написания полноценного веб-приложения, который, несомненно, поможет мне при работе над будущими проектами, даже если они не будут связаны с веб-разработкой.

 
СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ
1.	Официальная документация Flask. – URL: https://flask.palletsprojects.com/en/3.0.x/ (дата обращения 6.06.2024).
2.	Методические рекомендации по выполнению курсовых проектов. – URL: https://online.mospolytech.ru/pluginfile.php/975381/mod_resource/content/1/MR_po_KP_09.03.01.pdf (дата обращения 11.06.2024).


